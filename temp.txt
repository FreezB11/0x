void cnn::_train(trainset &curr){

    int layer_id = 0;
    int cc = 0;
    int k = 0;
    // int max_fc = 0;
    std::cout << curr.id << std::endl;
    // std::cout << "image: \n" << curr.image << std::endl;
    // this->buff_data.resize(10);
    std::cout << this->buff_data.size() << std::endl;
    // dlog()
    this->buff_data.resize(layer_id++);
    dlog()
    this->buff_data[layer_id].resize(k++);
    // log(buff_data.size())
    // std::cout << "the error is here" << std::endl;
    dlog()
    // this->buff_data.resize(k++);
    this->buff_data[layer_id][0] = curr.image;
    dlog()
    for(auto layer: net.layers){
        // k++;
        if(layer._type == "conv"){
            filters.resize(layer_id+1);
            this->buff_data.resize(k+1);

            filters[layer_id].resize(layer.filters+1);
            // std::cout << "checksum" << std::endl;
            int m = layer.kernel_s;
            dlog()
            if (layer_id >= filters.size()) {
                throw std::runtime_error("layer for filter not initialized");
            }
            if(layer.filters >= filters[layer_id].size()){
                throw std::runtime_error("filter not initialized in the layer");
            }
            for(size_t i =0; i< layer.filters;i++){
                filters[layer_id][i] = Eigen::MatrixXd::Random(m,m);
            }
            // this->buff_data = convolve(this->buff_data,filters[layer_id][0],layer.stride,layer.padding);
            dlog()
            for(size_t i =0; i< layer.filters;i++){
                dlog()
                this->buff_data[layer_id][i] = convolve(this->buff_data[layer_id][i],filters[layer_id][i],layer.stride,layer.padding);
                max_fc++;
            }
            layer_id++;
            dlog()
        }else{
            // std::cout << "i will pool " << std::endl;
            // this->buff_data = max_pool(this->buff_data);
            for(int i =0; i<max_fc; i++){
                this->buff_data[layer_id][i] = max_pool(this->buff_data[layer_id][i]);
            }
            layer_id++;
        }
        k++;
    }
    // out_n = flatten(this->buff_data);
    std::vector<double> buffv;
    for(int i = 0; i<max_fc;i++){
        buffv = flatten(this->buff_data[layer_id][i]);
        out_n.insert(out_n.end(),buffv.begin(),buffv.end());
    }

    for(auto nlayer: net.hidden_lyrs){
        
    }   

}